// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.29.2
// source: brevis/gateway.proto

package gwproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GatewayClient is the client API for Gateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GatewayClient interface {
	PrepareQuery(ctx context.Context, in *PrepareQueryRequest, opts ...grpc.CallOption) (*PrepareQueryResponse, error)
	SubmitAppCircuitProof(ctx context.Context, in *SubmitAppCircuitProofRequest, opts ...grpc.CallOption) (*SubmitAppCircuitProofResponse, error)
	GetQueryStatus(ctx context.Context, in *GetQueryStatusRequest, opts ...grpc.CallOption) (*GetQueryStatusResponse, error)
	GetQueryInfoForOP(ctx context.Context, in *GetQueryInfoForOPRequest, opts ...grpc.CallOption) (*GetQueryInfoForOPResponse, error)
	GetSingleRunParams(ctx context.Context, in *GetSingleRunParamsRequest, opts ...grpc.CallOption) (*GetSingleRunParamsResponse, error)
	SendBatchQueries(ctx context.Context, in *SendBatchQueriesRequest, opts ...grpc.CallOption) (*SendBatchQueriesResponse, error)
	GetCircuitDigest(ctx context.Context, in *CircuitDigestRequest, opts ...grpc.CallOption) (*CircuitDigestResponse, error)
	GetCircuitDummyInputRequest(ctx context.Context, in *CircuitDummyInputRequest, opts ...grpc.CallOption) (*CircuitDummyInputResponse, error)
}

type gatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayClient(cc grpc.ClientConnInterface) GatewayClient {
	return &gatewayClient{cc}
}

func (c *gatewayClient) PrepareQuery(ctx context.Context, in *PrepareQueryRequest, opts ...grpc.CallOption) (*PrepareQueryResponse, error) {
	out := new(PrepareQueryResponse)
	err := c.cc.Invoke(ctx, "/brevis.Gateway/PrepareQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) SubmitAppCircuitProof(ctx context.Context, in *SubmitAppCircuitProofRequest, opts ...grpc.CallOption) (*SubmitAppCircuitProofResponse, error) {
	out := new(SubmitAppCircuitProofResponse)
	err := c.cc.Invoke(ctx, "/brevis.Gateway/SubmitAppCircuitProof", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetQueryStatus(ctx context.Context, in *GetQueryStatusRequest, opts ...grpc.CallOption) (*GetQueryStatusResponse, error) {
	out := new(GetQueryStatusResponse)
	err := c.cc.Invoke(ctx, "/brevis.Gateway/GetQueryStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetQueryInfoForOP(ctx context.Context, in *GetQueryInfoForOPRequest, opts ...grpc.CallOption) (*GetQueryInfoForOPResponse, error) {
	out := new(GetQueryInfoForOPResponse)
	err := c.cc.Invoke(ctx, "/brevis.Gateway/GetQueryInfoForOP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetSingleRunParams(ctx context.Context, in *GetSingleRunParamsRequest, opts ...grpc.CallOption) (*GetSingleRunParamsResponse, error) {
	out := new(GetSingleRunParamsResponse)
	err := c.cc.Invoke(ctx, "/brevis.Gateway/GetSingleRunParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) SendBatchQueries(ctx context.Context, in *SendBatchQueriesRequest, opts ...grpc.CallOption) (*SendBatchQueriesResponse, error) {
	out := new(SendBatchQueriesResponse)
	err := c.cc.Invoke(ctx, "/brevis.Gateway/SendBatchQueries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetCircuitDigest(ctx context.Context, in *CircuitDigestRequest, opts ...grpc.CallOption) (*CircuitDigestResponse, error) {
	out := new(CircuitDigestResponse)
	err := c.cc.Invoke(ctx, "/brevis.Gateway/GetCircuitDigest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetCircuitDummyInputRequest(ctx context.Context, in *CircuitDummyInputRequest, opts ...grpc.CallOption) (*CircuitDummyInputResponse, error) {
	out := new(CircuitDummyInputResponse)
	err := c.cc.Invoke(ctx, "/brevis.Gateway/GetCircuitDummyInputRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayServer is the server API for Gateway service.
// All implementations should embed UnimplementedGatewayServer
// for forward compatibility
type GatewayServer interface {
	PrepareQuery(context.Context, *PrepareQueryRequest) (*PrepareQueryResponse, error)
	SubmitAppCircuitProof(context.Context, *SubmitAppCircuitProofRequest) (*SubmitAppCircuitProofResponse, error)
	GetQueryStatus(context.Context, *GetQueryStatusRequest) (*GetQueryStatusResponse, error)
	GetQueryInfoForOP(context.Context, *GetQueryInfoForOPRequest) (*GetQueryInfoForOPResponse, error)
	GetSingleRunParams(context.Context, *GetSingleRunParamsRequest) (*GetSingleRunParamsResponse, error)
	SendBatchQueries(context.Context, *SendBatchQueriesRequest) (*SendBatchQueriesResponse, error)
	GetCircuitDigest(context.Context, *CircuitDigestRequest) (*CircuitDigestResponse, error)
	GetCircuitDummyInputRequest(context.Context, *CircuitDummyInputRequest) (*CircuitDummyInputResponse, error)
}

// UnimplementedGatewayServer should be embedded to have forward compatible implementations.
type UnimplementedGatewayServer struct {
}

func (UnimplementedGatewayServer) PrepareQuery(context.Context, *PrepareQueryRequest) (*PrepareQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrepareQuery not implemented")
}
func (UnimplementedGatewayServer) SubmitAppCircuitProof(context.Context, *SubmitAppCircuitProofRequest) (*SubmitAppCircuitProofResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitAppCircuitProof not implemented")
}
func (UnimplementedGatewayServer) GetQueryStatus(context.Context, *GetQueryStatusRequest) (*GetQueryStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQueryStatus not implemented")
}
func (UnimplementedGatewayServer) GetQueryInfoForOP(context.Context, *GetQueryInfoForOPRequest) (*GetQueryInfoForOPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQueryInfoForOP not implemented")
}
func (UnimplementedGatewayServer) GetSingleRunParams(context.Context, *GetSingleRunParamsRequest) (*GetSingleRunParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSingleRunParams not implemented")
}
func (UnimplementedGatewayServer) SendBatchQueries(context.Context, *SendBatchQueriesRequest) (*SendBatchQueriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendBatchQueries not implemented")
}
func (UnimplementedGatewayServer) GetCircuitDigest(context.Context, *CircuitDigestRequest) (*CircuitDigestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCircuitDigest not implemented")
}
func (UnimplementedGatewayServer) GetCircuitDummyInputRequest(context.Context, *CircuitDummyInputRequest) (*CircuitDummyInputResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCircuitDummyInputRequest not implemented")
}

// UnsafeGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatewayServer will
// result in compilation errors.
type UnsafeGatewayServer interface {
	mustEmbedUnimplementedGatewayServer()
}

func RegisterGatewayServer(s grpc.ServiceRegistrar, srv GatewayServer) {
	s.RegisterService(&Gateway_ServiceDesc, srv)
}

func _Gateway_PrepareQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrepareQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).PrepareQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/brevis.Gateway/PrepareQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).PrepareQuery(ctx, req.(*PrepareQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_SubmitAppCircuitProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitAppCircuitProofRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).SubmitAppCircuitProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/brevis.Gateway/SubmitAppCircuitProof",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).SubmitAppCircuitProof(ctx, req.(*SubmitAppCircuitProofRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetQueryStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQueryStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetQueryStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/brevis.Gateway/GetQueryStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetQueryStatus(ctx, req.(*GetQueryStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetQueryInfoForOP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQueryInfoForOPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetQueryInfoForOP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/brevis.Gateway/GetQueryInfoForOP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetQueryInfoForOP(ctx, req.(*GetQueryInfoForOPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetSingleRunParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSingleRunParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetSingleRunParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/brevis.Gateway/GetSingleRunParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetSingleRunParams(ctx, req.(*GetSingleRunParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_SendBatchQueries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendBatchQueriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).SendBatchQueries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/brevis.Gateway/SendBatchQueries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).SendBatchQueries(ctx, req.(*SendBatchQueriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetCircuitDigest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CircuitDigestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetCircuitDigest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/brevis.Gateway/GetCircuitDigest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetCircuitDigest(ctx, req.(*CircuitDigestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetCircuitDummyInputRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CircuitDummyInputRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetCircuitDummyInputRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/brevis.Gateway/GetCircuitDummyInputRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetCircuitDummyInputRequest(ctx, req.(*CircuitDummyInputRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Gateway_ServiceDesc is the grpc.ServiceDesc for Gateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "brevis.Gateway",
	HandlerType: (*GatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PrepareQuery",
			Handler:    _Gateway_PrepareQuery_Handler,
		},
		{
			MethodName: "SubmitAppCircuitProof",
			Handler:    _Gateway_SubmitAppCircuitProof_Handler,
		},
		{
			MethodName: "GetQueryStatus",
			Handler:    _Gateway_GetQueryStatus_Handler,
		},
		{
			MethodName: "GetQueryInfoForOP",
			Handler:    _Gateway_GetQueryInfoForOP_Handler,
		},
		{
			MethodName: "GetSingleRunParams",
			Handler:    _Gateway_GetSingleRunParams_Handler,
		},
		{
			MethodName: "SendBatchQueries",
			Handler:    _Gateway_SendBatchQueries_Handler,
		},
		{
			MethodName: "GetCircuitDigest",
			Handler:    _Gateway_GetCircuitDigest_Handler,
		},
		{
			MethodName: "GetCircuitDummyInputRequest",
			Handler:    _Gateway_GetCircuitDummyInputRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "brevis/gateway.proto",
}
