// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.3
// 	protoc        v5.29.3
// source: brevis/gateway.proto

package gwproto

import (
	commonproto "github.com/brevis-network/brevis-sdk/sdk/proto/commonproto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ErrCode int32

const (
	ErrCode_ERROR_CODE_UNDEFINED                           ErrCode = 0
	ErrCode_ERROR_CODE_SLOT_VALUE_PROOF_GENERATION_FAILED  ErrCode = 1
	ErrCode_ERROR_CODE_TRANSACTION_PROOF_GENERATION_FAILED ErrCode = 2
)

// Enum value maps for ErrCode.
var (
	ErrCode_name = map[int32]string{
		0: "ERROR_CODE_UNDEFINED",
		1: "ERROR_CODE_SLOT_VALUE_PROOF_GENERATION_FAILED",
		2: "ERROR_CODE_TRANSACTION_PROOF_GENERATION_FAILED",
	}
	ErrCode_value = map[string]int32{
		"ERROR_CODE_UNDEFINED":                           0,
		"ERROR_CODE_SLOT_VALUE_PROOF_GENERATION_FAILED":  1,
		"ERROR_CODE_TRANSACTION_PROOF_GENERATION_FAILED": 2,
	}
)

func (x ErrCode) Enum() *ErrCode {
	p := new(ErrCode)
	*p = x
	return p
}

func (x ErrCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrCode) Descriptor() protoreflect.EnumDescriptor {
	return file_brevis_gateway_proto_enumTypes[0].Descriptor()
}

func (ErrCode) Type() protoreflect.EnumType {
	return &file_brevis_gateway_proto_enumTypes[0]
}

func (x ErrCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrCode.Descriptor instead.
func (ErrCode) EnumDescriptor() ([]byte, []int) {
	return file_brevis_gateway_proto_rawDescGZIP(), []int{0}
}

type CheckStatus int32

const (
	CheckStatus_IN_PROGRESS CheckStatus = 0
	CheckStatus_COMPLETE    CheckStatus = 1
)

// Enum value maps for CheckStatus.
var (
	CheckStatus_name = map[int32]string{
		0: "IN_PROGRESS",
		1: "COMPLETE",
	}
	CheckStatus_value = map[string]int32{
		"IN_PROGRESS": 0,
		"COMPLETE":    1,
	}
)

func (x CheckStatus) Enum() *CheckStatus {
	p := new(CheckStatus)
	*p = x
	return p
}

func (x CheckStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CheckStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_brevis_gateway_proto_enumTypes[1].Descriptor()
}

func (CheckStatus) Type() protoreflect.EnumType {
	return &file_brevis_gateway_proto_enumTypes[1]
}

func (x CheckStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CheckStatus.Descriptor instead.
func (CheckStatus) EnumDescriptor() ([]byte, []int) {
	return file_brevis_gateway_proto_rawDescGZIP(), []int{1}
}

type QueryOption int32

const (
	QueryOption_ZK_MODE QueryOption = 0
	QueryOption_OP_MODE QueryOption = 1
)

// Enum value maps for QueryOption.
var (
	QueryOption_name = map[int32]string{
		0: "ZK_MODE",
		1: "OP_MODE",
	}
	QueryOption_value = map[string]int32{
		"ZK_MODE": 0,
		"OP_MODE": 1,
	}
)

func (x QueryOption) Enum() *QueryOption {
	p := new(QueryOption)
	*p = x
	return p
}

func (x QueryOption) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QueryOption) Descriptor() protoreflect.EnumDescriptor {
	return file_brevis_gateway_proto_enumTypes[2].Descriptor()
}

func (QueryOption) Type() protoreflect.EnumType {
	return &file_brevis_gateway_proto_enumTypes[2]
}

func (x QueryOption) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QueryOption.Descriptor instead.
func (QueryOption) EnumDescriptor() ([]byte, []int) {
	return file_brevis_gateway_proto_rawDescGZIP(), []int{2}
}

type QueryStatus int32

const (
	QueryStatus_QS_UNKNOWN                      QueryStatus = 0
	QueryStatus_QS_TO_BE_PAID                   QueryStatus = 1
	QueryStatus_QS_PAID                         QueryStatus = 2
	QueryStatus_QS_PROOF_READY                  QueryStatus = 3
	QueryStatus_QS_COMPLETE                     QueryStatus = 4
	QueryStatus_QS_FAILED                       QueryStatus = 5
	QueryStatus_QS_OP_MESSAGE_PENDING           QueryStatus = 6
	QueryStatus_QS_OP_MESSAGE_READY             QueryStatus = 7
	QueryStatus_QS_OP_SUBMITTED                 QueryStatus = 8
	QueryStatus_QS_OP_MESSAGE_SUBMISSION_FAILED QueryStatus = 9
	QueryStatus_QS_OP_DISPUTING                 QueryStatus = 10
	QueryStatus_QS_OP_ASK_FOR_QUERY_DATA        QueryStatus = 11
	QueryStatus_QS_OP_QUERY_DATA_SUBMITTED      QueryStatus = 12
	QueryStatus_QS_OP_QUERY_DATA_POST_FAILED    QueryStatus = 13
	QueryStatus_QS_OP_ASK_FOR_QUERY_PROOF       QueryStatus = 14
	QueryStatus_QS_OP_DISPUTED                  QueryStatus = 15
	QueryStatus_QS_OP_ATTESTED                  QueryStatus = 16
	QueryStatus_QS_REFUNDED                     QueryStatus = 17
)

// Enum value maps for QueryStatus.
var (
	QueryStatus_name = map[int32]string{
		0:  "QS_UNKNOWN",
		1:  "QS_TO_BE_PAID",
		2:  "QS_PAID",
		3:  "QS_PROOF_READY",
		4:  "QS_COMPLETE",
		5:  "QS_FAILED",
		6:  "QS_OP_MESSAGE_PENDING",
		7:  "QS_OP_MESSAGE_READY",
		8:  "QS_OP_SUBMITTED",
		9:  "QS_OP_MESSAGE_SUBMISSION_FAILED",
		10: "QS_OP_DISPUTING",
		11: "QS_OP_ASK_FOR_QUERY_DATA",
		12: "QS_OP_QUERY_DATA_SUBMITTED",
		13: "QS_OP_QUERY_DATA_POST_FAILED",
		14: "QS_OP_ASK_FOR_QUERY_PROOF",
		15: "QS_OP_DISPUTED",
		16: "QS_OP_ATTESTED",
		17: "QS_REFUNDED",
	}
	QueryStatus_value = map[string]int32{
		"QS_UNKNOWN":                      0,
		"QS_TO_BE_PAID":                   1,
		"QS_PAID":                         2,
		"QS_PROOF_READY":                  3,
		"QS_COMPLETE":                     4,
		"QS_FAILED":                       5,
		"QS_OP_MESSAGE_PENDING":           6,
		"QS_OP_MESSAGE_READY":             7,
		"QS_OP_SUBMITTED":                 8,
		"QS_OP_MESSAGE_SUBMISSION_FAILED": 9,
		"QS_OP_DISPUTING":                 10,
		"QS_OP_ASK_FOR_QUERY_DATA":        11,
		"QS_OP_QUERY_DATA_SUBMITTED":      12,
		"QS_OP_QUERY_DATA_POST_FAILED":    13,
		"QS_OP_ASK_FOR_QUERY_PROOF":       14,
		"QS_OP_DISPUTED":                  15,
		"QS_OP_ATTESTED":                  16,
		"QS_REFUNDED":                     17,
	}
)

func (x QueryStatus) Enum() *QueryStatus {
	p := new(QueryStatus)
	*p = x
	return p
}

func (x QueryStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QueryStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_brevis_gateway_proto_enumTypes[3].Descriptor()
}

func (QueryStatus) Type() protoreflect.EnumType {
	return &file_brevis_gateway_proto_enumTypes[3]
}

func (x QueryStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QueryStatus.Descriptor instead.
func (QueryStatus) EnumDescriptor() ([]byte, []int) {
	return file_brevis_gateway_proto_rawDescGZIP(), []int{3}
}

type ErrMsg struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          ErrCode                `protobuf:"varint,1,opt,name=code,proto3,enum=brevis.ErrCode" json:"code,omitempty"`
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ErrMsg) Reset() {
	*x = ErrMsg{}
	mi := &file_brevis_gateway_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ErrMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrMsg) ProtoMessage() {}

func (x *ErrMsg) ProtoReflect() protoreflect.Message {
	mi := &file_brevis_gateway_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrMsg.ProtoReflect.Descriptor instead.
func (*ErrMsg) Descriptor() ([]byte, []int) {
	return file_brevis_gateway_proto_rawDescGZIP(), []int{0}
}

func (x *ErrMsg) GetCode() ErrCode {
	if x != nil {
		return x.Code
	}
	return ErrCode_ERROR_CODE_UNDEFINED
}

func (x *ErrMsg) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type PrepareQueryRequest struct {
	state             protoimpl.MessageState      `protogen:"open.v1"`
	ChainId           uint64                      `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	ReceiptInfos      []*ReceiptInfo              `protobuf:"bytes,2,rep,name=receipt_infos,json=receiptInfos,proto3" json:"receipt_infos,omitempty"`
	StorageQueryInfos []*StorageQueryInfo         `protobuf:"bytes,3,rep,name=storage_query_infos,json=storageQueryInfos,proto3" json:"storage_query_infos,omitempty"`
	TransactionInfos  []*TransactionInfo          `protobuf:"bytes,4,rep,name=transaction_infos,json=transactionInfos,proto3" json:"transaction_infos,omitempty"`
	AppCircuitInfo    *commonproto.AppCircuitInfo `protobuf:"bytes,5,opt,name=app_circuit_info,json=appCircuitInfo,proto3" json:"app_circuit_info,omitempty"`
	TargetChainId     uint64                      `protobuf:"varint,6,opt,name=target_chain_id,json=targetChainId,proto3" json:"target_chain_id,omitempty"`
	Option            QueryOption                 `protobuf:"varint,7,opt,name=option,proto3,enum=brevis.QueryOption" json:"option,omitempty"`
	// Deprecated: Marked as deprecated in brevis/gateway.proto.
	UsePlonky2       bool                          `protobuf:"varint,8,opt,name=use_plonky2,json=usePlonky2,proto3" json:"use_plonky2,omitempty"`
	UseVm            bool                          `protobuf:"varint,9,opt,name=use_vm,json=useVm,proto3" json:"use_vm,omitempty"`
	VmAppCircuitInfo *commonproto.VmAppCircuitInfo `protobuf:"bytes,10,opt,name=vm_app_circuit_info,json=vmAppCircuitInfo,proto3" json:"vm_app_circuit_info,omitempty"`
}

func (x *PrepareQueryRequest) Reset() {
	*x = PrepareQueryRequest{}
	mi := &file_brevis_gateway_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrepareQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareQueryRequest) ProtoMessage() {}

func (x *PrepareQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brevis_gateway_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareQueryRequest.ProtoReflect.Descriptor instead.
func (*PrepareQueryRequest) Descriptor() ([]byte, []int) {
	return file_brevis_gateway_proto_rawDescGZIP(), []int{1}
}

func (x *PrepareQueryRequest) GetChainId() uint64 {
	if x != nil {
		return x.ChainId
	}
	return 0
}

func (x *PrepareQueryRequest) GetReceiptInfos() []*ReceiptInfo {
	if x != nil {
		return x.ReceiptInfos
	}
	return nil
}

func (x *PrepareQueryRequest) GetStorageQueryInfos() []*StorageQueryInfo {
	if x != nil {
		return x.StorageQueryInfos
	}
	return nil
}

func (x *PrepareQueryRequest) GetTransactionInfos() []*TransactionInfo {
	if x != nil {
		return x.TransactionInfos
	}
	return nil
}

func (x *PrepareQueryRequest) GetAppCircuitInfo() *commonproto.AppCircuitInfo {
	if x != nil {
		return x.AppCircuitInfo
	}
	return nil
}

func (x *PrepareQueryRequest) GetTargetChainId() uint64 {
	if x != nil {
		return x.TargetChainId
	}
	return 0
}

func (x *PrepareQueryRequest) GetOption() QueryOption {
	if x != nil {
		return x.Option
	}
	return QueryOption_ZK_MODE
}

// Deprecated: Marked as deprecated in brevis/gateway.proto.
func (x *PrepareQueryRequest) GetUsePlonky2() bool {
	if x != nil {
		return x.UsePlonky2
	}
	return false
}

func (x *PrepareQueryRequest) GetUseVm() bool {
	if x != nil {
		return x.UseVm
	}
	return false
}

func (x *PrepareQueryRequest) GetVmAppCircuitInfo() *commonproto.VmAppCircuitInfo {
	if x != nil {
		return x.VmAppCircuitInfo
	}
	return nil
}

type PrepareQueryResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Err           *ErrMsg                `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	QueryKey      *QueryKey              `protobuf:"bytes,2,opt,name=query_key,json=queryKey,proto3" json:"query_key,omitempty"`
	Fee           string                 `protobuf:"bytes,3,opt,name=fee,proto3" json:"fee,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PrepareQueryResponse) Reset() {
	*x = PrepareQueryResponse{}
	mi := &file_brevis_gateway_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrepareQueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareQueryResponse) ProtoMessage() {}

func (x *PrepareQueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brevis_gateway_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareQueryResponse.ProtoReflect.Descriptor instead.
func (*PrepareQueryResponse) Descriptor() ([]byte, []int) {
	return file_brevis_gateway_proto_rawDescGZIP(), []int{2}
}

func (x *PrepareQueryResponse) GetErr() *ErrMsg {
	if x != nil {
		return x.Err
	}
	return nil
}

func (x *PrepareQueryResponse) GetQueryKey() *QueryKey {
	if x != nil {
		return x.QueryKey
	}
	return nil
}

func (x *PrepareQueryResponse) GetFee() string {
	if x != nil {
		return x.Fee
	}
	return ""
}

type SubmitAppCircuitProofRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueryKey         *QueryKey                            `protobuf:"bytes,1,opt,name=query_key,json=queryKey,proto3" json:"query_key,omitempty"`
	TargetChainId    uint64                               `protobuf:"varint,2,opt,name=target_chain_id,json=targetChainId,proto3" json:"target_chain_id,omitempty"`
	Proof            string                               `protobuf:"bytes,3,opt,name=proof,proto3" json:"proof,omitempty"`
	AppCircuitInfo   *commonproto.AppCircuitInfoWithProof `protobuf:"bytes,4,opt,name=app_circuit_info,json=appCircuitInfo,proto3" json:"app_circuit_info,omitempty"`
	VmAppCircuitInfo *commonproto.VmAppCircuitInfo        `protobuf:"bytes,5,opt,name=vm_app_circuit_info,json=vmAppCircuitInfo,proto3" json:"vm_app_circuit_info,omitempty"`
}

func (x *SubmitAppCircuitProofRequest) Reset() {
	*x = SubmitAppCircuitProofRequest{}
	mi := &file_brevis_gateway_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmitAppCircuitProofRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitAppCircuitProofRequest) ProtoMessage() {}

func (x *SubmitAppCircuitProofRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brevis_gateway_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitAppCircuitProofRequest.ProtoReflect.Descriptor instead.
func (*SubmitAppCircuitProofRequest) Descriptor() ([]byte, []int) {
	return file_brevis_gateway_proto_rawDescGZIP(), []int{3}
}

func (x *SubmitAppCircuitProofRequest) GetQueryKey() *QueryKey {
	if x != nil {
		return x.QueryKey
	}
	return nil
}

func (x *SubmitAppCircuitProofRequest) GetTargetChainId() uint64 {
	if x != nil {
		return x.TargetChainId
	}
	return 0
}

func (x *SubmitAppCircuitProofRequest) GetProof() string {
	if x != nil {
		return x.Proof
	}
	return ""
}

func (x *SubmitAppCircuitProofRequest) GetAppCircuitInfo() *commonproto.AppCircuitInfoWithProof {
	if x != nil {
		return x.AppCircuitInfo
	}
	return nil
}

func (x *SubmitAppCircuitProofRequest) GetVmAppCircuitInfo() *commonproto.VmAppCircuitInfo {
	if x != nil {
		return x.VmAppCircuitInfo
	}
	return nil
}

type SubmitAppCircuitProofResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Err           *ErrMsg                `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	Success       bool                   `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubmitAppCircuitProofResponse) Reset() {
	*x = SubmitAppCircuitProofResponse{}
	mi := &file_brevis_gateway_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmitAppCircuitProofResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitAppCircuitProofResponse) ProtoMessage() {}

func (x *SubmitAppCircuitProofResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brevis_gateway_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitAppCircuitProofResponse.ProtoReflect.Descriptor instead.
func (*SubmitAppCircuitProofResponse) Descriptor() ([]byte, []int) {
	return file_brevis_gateway_proto_rawDescGZIP(), []int{4}
}

func (x *SubmitAppCircuitProofResponse) GetErr() *ErrMsg {
	if x != nil {
		return x.Err
	}
	return nil
}

func (x *SubmitAppCircuitProofResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type GetQueryStatusRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	QueryKey      *QueryKey              `protobuf:"bytes,1,opt,name=query_key,json=queryKey,proto3" json:"query_key,omitempty"`
	TargetChainId uint64                 `protobuf:"varint,2,opt,name=target_chain_id,json=targetChainId,proto3" json:"target_chain_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetQueryStatusRequest) Reset() {
	*x = GetQueryStatusRequest{}
	mi := &file_brevis_gateway_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetQueryStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQueryStatusRequest) ProtoMessage() {}

func (x *GetQueryStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brevis_gateway_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQueryStatusRequest.ProtoReflect.Descriptor instead.
func (*GetQueryStatusRequest) Descriptor() ([]byte, []int) {
	return file_brevis_gateway_proto_rawDescGZIP(), []int{5}
}

func (x *GetQueryStatusRequest) GetQueryKey() *QueryKey {
	if x != nil {
		return x.QueryKey
	}
	return nil
}

func (x *GetQueryStatusRequest) GetTargetChainId() uint64 {
	if x != nil {
		return x.TargetChainId
	}
	return 0
}

type GetQueryStatusResponse struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	Err                   *ErrMsg                `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	Status                QueryStatus            `protobuf:"varint,2,opt,name=status,proto3,enum=brevis.QueryStatus" json:"status,omitempty"`
	TxHash                string                 `protobuf:"bytes,3,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	Proof                 string                 `protobuf:"bytes,4,opt,name=proof,proto3" json:"proof,omitempty"`
	ProofData             *ProofData             `protobuf:"bytes,5,opt,name=proof_data,json=proofData,proto3" json:"proof_data,omitempty"`
	CircuitOutput         string                 `protobuf:"bytes,6,opt,name=circuit_output,json=circuitOutput,proto3" json:"circuit_output,omitempty"`
	ProofWithPublicInputs string                 `protobuf:"bytes,7,opt,name=proof_with_public_inputs,json=proofWithPublicInputs,proto3" json:"proof_with_public_inputs,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *GetQueryStatusResponse) Reset() {
	*x = GetQueryStatusResponse{}
	mi := &file_brevis_gateway_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetQueryStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQueryStatusResponse) ProtoMessage() {}

func (x *GetQueryStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brevis_gateway_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQueryStatusResponse.ProtoReflect.Descriptor instead.
func (*GetQueryStatusResponse) Descriptor() ([]byte, []int) {
	return file_brevis_gateway_proto_rawDescGZIP(), []int{6}
}

func (x *GetQueryStatusResponse) GetErr() *ErrMsg {
	if x != nil {
		return x.Err
	}
	return nil
}

func (x *GetQueryStatusResponse) GetStatus() QueryStatus {
	if x != nil {
		return x.Status
	}
	return QueryStatus_QS_UNKNOWN
}

func (x *GetQueryStatusResponse) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

func (x *GetQueryStatusResponse) GetProof() string {
	if x != nil {
		return x.Proof
	}
	return ""
}

func (x *GetQueryStatusResponse) GetProofData() *ProofData {
	if x != nil {
		return x.ProofData
	}
	return nil
}

func (x *GetQueryStatusResponse) GetCircuitOutput() string {
	if x != nil {
		return x.CircuitOutput
	}
	return ""
}

func (x *GetQueryStatusResponse) GetProofWithPublicInputs() string {
	if x != nil {
		return x.ProofWithPublicInputs
	}
	return ""
}

type GetQueryInfoForOPRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	QueryHash     string                 `protobuf:"bytes,1,opt,name=query_hash,json=queryHash,proto3" json:"query_hash,omitempty"`
	TargetChainId uint64                 `protobuf:"varint,2,opt,name=target_chain_id,json=targetChainId,proto3" json:"target_chain_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetQueryInfoForOPRequest) Reset() {
	*x = GetQueryInfoForOPRequest{}
	mi := &file_brevis_gateway_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetQueryInfoForOPRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQueryInfoForOPRequest) ProtoMessage() {}

func (x *GetQueryInfoForOPRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brevis_gateway_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQueryInfoForOPRequest.ProtoReflect.Descriptor instead.
func (*GetQueryInfoForOPRequest) Descriptor() ([]byte, []int) {
	return file_brevis_gateway_proto_rawDescGZIP(), []int{7}
}

func (x *GetQueryInfoForOPRequest) GetQueryHash() string {
	if x != nil {
		return x.QueryHash
	}
	return ""
}

func (x *GetQueryInfoForOPRequest) GetTargetChainId() uint64 {
	if x != nil {
		return x.TargetChainId
	}
	return 0
}

type GetQueryInfoForOPResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Err           *ErrMsg                `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	QueryInfo     []byte                 `protobuf:"bytes,2,opt,name=query_info,json=queryInfo,proto3" json:"query_info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetQueryInfoForOPResponse) Reset() {
	*x = GetQueryInfoForOPResponse{}
	mi := &file_brevis_gateway_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetQueryInfoForOPResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQueryInfoForOPResponse) ProtoMessage() {}

func (x *GetQueryInfoForOPResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brevis_gateway_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQueryInfoForOPResponse.ProtoReflect.Descriptor instead.
func (*GetQueryInfoForOPResponse) Descriptor() ([]byte, []int) {
	return file_brevis_gateway_proto_rawDescGZIP(), []int{8}
}

func (x *GetQueryInfoForOPResponse) GetErr() *ErrMsg {
	if x != nil {
		return x.Err
	}
	return nil
}

func (x *GetQueryInfoForOPResponse) GetQueryInfo() []byte {
	if x != nil {
		return x.QueryInfo
	}
	return nil
}

type GetSingleRunParamsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	QueryKey      *QueryKey              `protobuf:"bytes,1,opt,name=query_key,json=queryKey,proto3" json:"query_key,omitempty"`
	TargetChainId uint64                 `protobuf:"varint,2,opt,name=target_chain_id,json=targetChainId,proto3" json:"target_chain_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSingleRunParamsRequest) Reset() {
	*x = GetSingleRunParamsRequest{}
	mi := &file_brevis_gateway_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSingleRunParamsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSingleRunParamsRequest) ProtoMessage() {}

func (x *GetSingleRunParamsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brevis_gateway_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSingleRunParamsRequest.ProtoReflect.Descriptor instead.
func (*GetSingleRunParamsRequest) Descriptor() ([]byte, []int) {
	return file_brevis_gateway_proto_rawDescGZIP(), []int{9}
}

func (x *GetSingleRunParamsRequest) GetQueryKey() *QueryKey {
	if x != nil {
		return x.QueryKey
	}
	return nil
}

func (x *GetSingleRunParamsRequest) GetTargetChainId() uint64 {
	if x != nil {
		return x.TargetChainId
	}
	return 0
}

type GetSingleRunParamsResponse struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Err              *ErrMsg                `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	SrcChainId       uint64                 `protobuf:"varint,2,opt,name=src_chain_id,json=srcChainId,proto3" json:"src_chain_id,omitempty"`
	ProofData        *ProofData             `protobuf:"bytes,3,opt,name=proof_data,json=proofData,proto3" json:"proof_data,omitempty"`
	MerkleRoot       string                 `protobuf:"bytes,4,opt,name=merkle_root,json=merkleRoot,proto3" json:"merkle_root,omitempty"`
	MerkleProof      []string               `protobuf:"bytes,5,rep,name=merkle_proof,json=merkleProof,proto3" json:"merkle_proof,omitempty"`
	NodeIndex        uint64                 `protobuf:"varint,6,opt,name=node_index,json=nodeIndex,proto3" json:"node_index,omitempty"`
	AppCircuitOutput string                 `protobuf:"bytes,7,opt,name=app_circuit_output,json=appCircuitOutput,proto3" json:"app_circuit_output,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *GetSingleRunParamsResponse) Reset() {
	*x = GetSingleRunParamsResponse{}
	mi := &file_brevis_gateway_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSingleRunParamsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSingleRunParamsResponse) ProtoMessage() {}

func (x *GetSingleRunParamsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brevis_gateway_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSingleRunParamsResponse.ProtoReflect.Descriptor instead.
func (*GetSingleRunParamsResponse) Descriptor() ([]byte, []int) {
	return file_brevis_gateway_proto_rawDescGZIP(), []int{10}
}

func (x *GetSingleRunParamsResponse) GetErr() *ErrMsg {
	if x != nil {
		return x.Err
	}
	return nil
}

func (x *GetSingleRunParamsResponse) GetSrcChainId() uint64 {
	if x != nil {
		return x.SrcChainId
	}
	return 0
}

func (x *GetSingleRunParamsResponse) GetProofData() *ProofData {
	if x != nil {
		return x.ProofData
	}
	return nil
}

func (x *GetSingleRunParamsResponse) GetMerkleRoot() string {
	if x != nil {
		return x.MerkleRoot
	}
	return ""
}

func (x *GetSingleRunParamsResponse) GetMerkleProof() []string {
	if x != nil {
		return x.MerkleProof
	}
	return nil
}

func (x *GetSingleRunParamsResponse) GetNodeIndex() uint64 {
	if x != nil {
		return x.NodeIndex
	}
	return 0
}

func (x *GetSingleRunParamsResponse) GetAppCircuitOutput() string {
	if x != nil {
		return x.AppCircuitOutput
	}
	return ""
}

type ProofData struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	CommitHash string                 `protobuf:"bytes,1,opt,name=commit_hash,json=commitHash,proto3" json:"commit_hash,omitempty"`
	// Deprecated: Marked as deprecated in brevis/gateway.proto.
	VkHash               string `protobuf:"bytes,2,opt,name=vk_hash,json=vkHash,proto3" json:"vk_hash,omitempty"`
	AppCommitHash        string `protobuf:"bytes,3,opt,name=app_commit_hash,json=appCommitHash,proto3" json:"app_commit_hash,omitempty"`
	AppVkHash            string `protobuf:"bytes,4,opt,name=app_vk_hash,json=appVkHash,proto3" json:"app_vk_hash,omitempty"`
	SmtRoot              string `protobuf:"bytes,5,opt,name=smt_root,json=smtRoot,proto3" json:"smt_root,omitempty"`
	DummyInputCommitment string `protobuf:"bytes,6,opt,name=dummy_input_commitment,json=dummyInputCommitment,proto3" json:"dummy_input_commitment,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *ProofData) Reset() {
	*x = ProofData{}
	mi := &file_brevis_gateway_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProofData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProofData) ProtoMessage() {}

func (x *ProofData) ProtoReflect() protoreflect.Message {
	mi := &file_brevis_gateway_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProofData.ProtoReflect.Descriptor instead.
func (*ProofData) Descriptor() ([]byte, []int) {
	return file_brevis_gateway_proto_rawDescGZIP(), []int{11}
}

func (x *ProofData) GetCommitHash() string {
	if x != nil {
		return x.CommitHash
	}
	return ""
}

// Deprecated: Marked as deprecated in brevis/gateway.proto.
func (x *ProofData) GetVkHash() string {
	if x != nil {
		return x.VkHash
	}
	return ""
}

func (x *ProofData) GetAppCommitHash() string {
	if x != nil {
		return x.AppCommitHash
	}
	return ""
}

func (x *ProofData) GetAppVkHash() string {
	if x != nil {
		return x.AppVkHash
	}
	return ""
}

func (x *ProofData) GetSmtRoot() string {
	if x != nil {
		return x.SmtRoot
	}
	return ""
}

func (x *ProofData) GetDummyInputCommitment() string {
	if x != nil {
		return x.DummyInputCommitment
	}
	return ""
}

type SendBatchQueriesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChainId       uint64                 `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Queries       []*Query               `protobuf:"bytes,2,rep,name=queries,proto3" json:"queries,omitempty"`
	TargetChainId uint64                 `protobuf:"varint,3,opt,name=target_chain_id,json=targetChainId,proto3" json:"target_chain_id,omitempty"`
	Option        QueryOption            `protobuf:"varint,4,opt,name=option,proto3,enum=brevis.QueryOption" json:"option,omitempty"`
	ApiKey        string                 `protobuf:"bytes,5,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"` // authentication
	UseVm         bool                   `protobuf:"varint,6,opt,name=use_vm,json=useVm,proto3" json:"use_vm,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SendBatchQueriesRequest) Reset() {
	*x = SendBatchQueriesRequest{}
	mi := &file_brevis_gateway_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendBatchQueriesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendBatchQueriesRequest) ProtoMessage() {}

func (x *SendBatchQueriesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brevis_gateway_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendBatchQueriesRequest.ProtoReflect.Descriptor instead.
func (*SendBatchQueriesRequest) Descriptor() ([]byte, []int) {
	return file_brevis_gateway_proto_rawDescGZIP(), []int{12}
}

func (x *SendBatchQueriesRequest) GetChainId() uint64 {
	if x != nil {
		return x.ChainId
	}
	return 0
}

func (x *SendBatchQueriesRequest) GetQueries() []*Query {
	if x != nil {
		return x.Queries
	}
	return nil
}

func (x *SendBatchQueriesRequest) GetTargetChainId() uint64 {
	if x != nil {
		return x.TargetChainId
	}
	return 0
}

func (x *SendBatchQueriesRequest) GetOption() QueryOption {
	if x != nil {
		return x.Option
	}
	return QueryOption_ZK_MODE
}

func (x *SendBatchQueriesRequest) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

func (x *SendBatchQueriesRequest) GetUseVm() bool {
	if x != nil {
		return x.UseVm
	}
	return false
}

type Query struct {
	state             protoimpl.MessageState               `protogen:"open.v1"`
	ReceiptInfos      []*ReceiptInfo                       `protobuf:"bytes,1,rep,name=receipt_infos,json=receiptInfos,proto3" json:"receipt_infos,omitempty"`
	StorageQueryInfos []*StorageQueryInfo                  `protobuf:"bytes,2,rep,name=storage_query_infos,json=storageQueryInfos,proto3" json:"storage_query_infos,omitempty"`
	TransactionInfos  []*TransactionInfo                   `protobuf:"bytes,3,rep,name=transaction_infos,json=transactionInfos,proto3" json:"transaction_infos,omitempty"`
	AppCircuitInfo    *commonproto.AppCircuitInfoWithProof `protobuf:"bytes,4,opt,name=app_circuit_info,json=appCircuitInfo,proto3" json:"app_circuit_info,omitempty"`
	// Deprecated: Marked as deprecated in brevis/gateway.proto.
	UsePlonky2       bool                          `protobuf:"varint,5,opt,name=use_plonky2,json=usePlonky2,proto3" json:"use_plonky2,omitempty"`
	VmAppCircuitInfo *commonproto.VmAppCircuitInfo `protobuf:"bytes,6,opt,name=vm_app_circuit_info,json=vmAppCircuitInfo,proto3" json:"vm_app_circuit_info,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Query) Reset() {
	*x = Query{}
	mi := &file_brevis_gateway_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Query) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Query) ProtoMessage() {}

func (x *Query) ProtoReflect() protoreflect.Message {
	mi := &file_brevis_gateway_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Query.ProtoReflect.Descriptor instead.
func (*Query) Descriptor() ([]byte, []int) {
	return file_brevis_gateway_proto_rawDescGZIP(), []int{13}
}

func (x *Query) GetReceiptInfos() []*ReceiptInfo {
	if x != nil {
		return x.ReceiptInfos
	}
	return nil
}

func (x *Query) GetStorageQueryInfos() []*StorageQueryInfo {
	if x != nil {
		return x.StorageQueryInfos
	}
	return nil
}

func (x *Query) GetTransactionInfos() []*TransactionInfo {
	if x != nil {
		return x.TransactionInfos
	}
	return nil
}

func (x *Query) GetAppCircuitInfo() *commonproto.AppCircuitInfoWithProof {
	if x != nil {
		return x.AppCircuitInfo
	}
	return nil
}

// Deprecated: Marked as deprecated in brevis/gateway.proto.
func (x *Query) GetUsePlonky2() bool {
	if x != nil {
		return x.UsePlonky2
	}
	return false
}

func (x *Query) GetVmAppCircuitInfo() *commonproto.VmAppCircuitInfo {
	if x != nil {
		return x.VmAppCircuitInfo
	}
	return nil
}

type SendBatchQueriesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Err           *ErrMsg                `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	QueryKeys     []*QueryKey            `protobuf:"bytes,2,rep,name=query_keys,json=queryKeys,proto3" json:"query_keys,omitempty"`
	Fee           string                 `protobuf:"bytes,3,opt,name=fee,proto3" json:"fee,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SendBatchQueriesResponse) Reset() {
	*x = SendBatchQueriesResponse{}
	mi := &file_brevis_gateway_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendBatchQueriesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendBatchQueriesResponse) ProtoMessage() {}

func (x *SendBatchQueriesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brevis_gateway_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendBatchQueriesResponse.ProtoReflect.Descriptor instead.
func (*SendBatchQueriesResponse) Descriptor() ([]byte, []int) {
	return file_brevis_gateway_proto_rawDescGZIP(), []int{14}
}

func (x *SendBatchQueriesResponse) GetErr() *ErrMsg {
	if x != nil {
		return x.Err
	}
	return nil
}

func (x *SendBatchQueriesResponse) GetQueryKeys() []*QueryKey {
	if x != nil {
		return x.QueryKeys
	}
	return nil
}

func (x *SendBatchQueriesResponse) GetFee() string {
	if x != nil {
		return x.Fee
	}
	return ""
}

type QueryKey struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	QueryHash     string                 `protobuf:"bytes,1,opt,name=query_hash,json=queryHash,proto3" json:"query_hash,omitempty"`
	Nonce         uint64                 `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryKey) Reset() {
	*x = QueryKey{}
	mi := &file_brevis_gateway_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryKey) ProtoMessage() {}

func (x *QueryKey) ProtoReflect() protoreflect.Message {
	mi := &file_brevis_gateway_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryKey.ProtoReflect.Descriptor instead.
func (*QueryKey) Descriptor() ([]byte, []int) {
	return file_brevis_gateway_proto_rawDescGZIP(), []int{15}
}

func (x *QueryKey) GetQueryHash() string {
	if x != nil {
		return x.QueryHash
	}
	return ""
}

func (x *QueryKey) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

type SendBatchQueriesAsyncResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Err           *ErrMsg                `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	BatchId       string                 `protobuf:"bytes,2,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`
	RequestIds    []string               `protobuf:"bytes,3,rep,name=request_ids,json=requestIds,proto3" json:"request_ids,omitempty"`
	Nonce         uint64                 `protobuf:"varint,4,opt,name=nonce,proto3" json:"nonce,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SendBatchQueriesAsyncResponse) Reset() {
	*x = SendBatchQueriesAsyncResponse{}
	mi := &file_brevis_gateway_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendBatchQueriesAsyncResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendBatchQueriesAsyncResponse) ProtoMessage() {}

func (x *SendBatchQueriesAsyncResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brevis_gateway_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendBatchQueriesAsyncResponse.ProtoReflect.Descriptor instead.
func (*SendBatchQueriesAsyncResponse) Descriptor() ([]byte, []int) {
	return file_brevis_gateway_proto_rawDescGZIP(), []int{16}
}

func (x *SendBatchQueriesAsyncResponse) GetErr() *ErrMsg {
	if x != nil {
		return x.Err
	}
	return nil
}

func (x *SendBatchQueriesAsyncResponse) GetBatchId() string {
	if x != nil {
		return x.BatchId
	}
	return ""
}

func (x *SendBatchQueriesAsyncResponse) GetRequestIds() []string {
	if x != nil {
		return x.RequestIds
	}
	return nil
}

func (x *SendBatchQueriesAsyncResponse) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

type GetQueryKeysByBatchIdRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BatchId       string                 `protobuf:"bytes,1,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetQueryKeysByBatchIdRequest) Reset() {
	*x = GetQueryKeysByBatchIdRequest{}
	mi := &file_brevis_gateway_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetQueryKeysByBatchIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQueryKeysByBatchIdRequest) ProtoMessage() {}

func (x *GetQueryKeysByBatchIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brevis_gateway_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQueryKeysByBatchIdRequest.ProtoReflect.Descriptor instead.
func (*GetQueryKeysByBatchIdRequest) Descriptor() ([]byte, []int) {
	return file_brevis_gateway_proto_rawDescGZIP(), []int{17}
}

func (x *GetQueryKeysByBatchIdRequest) GetBatchId() string {
	if x != nil {
		return x.BatchId
	}
	return ""
}

type GetQueryKeysByBatchIdResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Err           *ErrMsg                `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	QueryKeys     []*QueryKey            `protobuf:"bytes,2,rep,name=query_keys,json=queryKeys,proto3" json:"query_keys,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetQueryKeysByBatchIdResponse) Reset() {
	*x = GetQueryKeysByBatchIdResponse{}
	mi := &file_brevis_gateway_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetQueryKeysByBatchIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQueryKeysByBatchIdResponse) ProtoMessage() {}

func (x *GetQueryKeysByBatchIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brevis_gateway_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQueryKeysByBatchIdResponse.ProtoReflect.Descriptor instead.
func (*GetQueryKeysByBatchIdResponse) Descriptor() ([]byte, []int) {
	return file_brevis_gateway_proto_rawDescGZIP(), []int{18}
}

func (x *GetQueryKeysByBatchIdResponse) GetErr() *ErrMsg {
	if x != nil {
		return x.Err
	}
	return nil
}

func (x *GetQueryKeysByBatchIdResponse) GetQueryKeys() []*QueryKey {
	if x != nil {
		return x.QueryKeys
	}
	return nil
}

type CircuitDigestRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CircuitDigestRequest) Reset() {
	*x = CircuitDigestRequest{}
	mi := &file_brevis_gateway_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CircuitDigestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CircuitDigestRequest) ProtoMessage() {}

func (x *CircuitDigestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brevis_gateway_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CircuitDigestRequest.ProtoReflect.Descriptor instead.
func (*CircuitDigestRequest) Descriptor() ([]byte, []int) {
	return file_brevis_gateway_proto_rawDescGZIP(), []int{19}
}

type CircuitDigestResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Err           *ErrMsg                `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	HashesLimbs   []uint64               `protobuf:"varint,2,rep,packed,name=hashes_limbs,json=hashesLimbs,proto3" json:"hashes_limbs,omitempty"`
	GnarkVks      []string               `protobuf:"bytes,3,rep,name=gnark_vks,json=gnarkVks,proto3" json:"gnark_vks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CircuitDigestResponse) Reset() {
	*x = CircuitDigestResponse{}
	mi := &file_brevis_gateway_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CircuitDigestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CircuitDigestResponse) ProtoMessage() {}

func (x *CircuitDigestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brevis_gateway_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CircuitDigestResponse.ProtoReflect.Descriptor instead.
func (*CircuitDigestResponse) Descriptor() ([]byte, []int) {
	return file_brevis_gateway_proto_rawDescGZIP(), []int{20}
}

func (x *CircuitDigestResponse) GetErr() *ErrMsg {
	if x != nil {
		return x.Err
	}
	return nil
}

func (x *CircuitDigestResponse) GetHashesLimbs() []uint64 {
	if x != nil {
		return x.HashesLimbs
	}
	return nil
}

func (x *CircuitDigestResponse) GetGnarkVks() []string {
	if x != nil {
		return x.GnarkVks
	}
	return nil
}

type CircuitDummyInputRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChainId       uint64                 `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CircuitDummyInputRequest) Reset() {
	*x = CircuitDummyInputRequest{}
	mi := &file_brevis_gateway_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CircuitDummyInputRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CircuitDummyInputRequest) ProtoMessage() {}

func (x *CircuitDummyInputRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brevis_gateway_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CircuitDummyInputRequest.ProtoReflect.Descriptor instead.
func (*CircuitDummyInputRequest) Descriptor() ([]byte, []int) {
	return file_brevis_gateway_proto_rawDescGZIP(), []int{21}
}

func (x *CircuitDummyInputRequest) GetChainId() uint64 {
	if x != nil {
		return x.ChainId
	}
	return 0
}

type CircuitDummyInputResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Err           *ErrMsg                `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	Receipt       string                 `protobuf:"bytes,2,opt,name=receipt,proto3" json:"receipt,omitempty"`
	Storage       string                 `protobuf:"bytes,3,opt,name=storage,proto3" json:"storage,omitempty"`
	Tx            string                 `protobuf:"bytes,4,opt,name=tx,proto3" json:"tx,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CircuitDummyInputResponse) Reset() {
	*x = CircuitDummyInputResponse{}
	mi := &file_brevis_gateway_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CircuitDummyInputResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CircuitDummyInputResponse) ProtoMessage() {}

func (x *CircuitDummyInputResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brevis_gateway_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CircuitDummyInputResponse.ProtoReflect.Descriptor instead.
func (*CircuitDummyInputResponse) Descriptor() ([]byte, []int) {
	return file_brevis_gateway_proto_rawDescGZIP(), []int{22}
}

func (x *CircuitDummyInputResponse) GetErr() *ErrMsg {
	if x != nil {
		return x.Err
	}
	return nil
}

func (x *CircuitDummyInputResponse) GetReceipt() string {
	if x != nil {
		return x.Receipt
	}
	return ""
}

func (x *CircuitDummyInputResponse) GetStorage() string {
	if x != nil {
		return x.Storage
	}
	return ""
}

func (x *CircuitDummyInputResponse) GetTx() string {
	if x != nil {
		return x.Tx
	}
	return ""
}

type SubmitVKRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	VkHash        string                 `protobuf:"bytes,1,opt,name=vk_hash,json=vkHash,proto3" json:"vk_hash,omitempty"`
	VkRaw         string                 `protobuf:"bytes,2,opt,name=vk_raw,json=vkRaw,proto3" json:"vk_raw,omitempty"`
	ChainId       uint64                 `protobuf:"varint,3,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	TargetChainId uint64                 `protobuf:"varint,4,opt,name=target_chain_id,json=targetChainId,proto3" json:"target_chain_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubmitVKRequest) Reset() {
	*x = SubmitVKRequest{}
	mi := &file_brevis_gateway_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmitVKRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitVKRequest) ProtoMessage() {}

func (x *SubmitVKRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brevis_gateway_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitVKRequest.ProtoReflect.Descriptor instead.
func (*SubmitVKRequest) Descriptor() ([]byte, []int) {
	return file_brevis_gateway_proto_rawDescGZIP(), []int{23}
}

func (x *SubmitVKRequest) GetVkHash() string {
	if x != nil {
		return x.VkHash
	}
	return ""
}

func (x *SubmitVKRequest) GetVkRaw() string {
	if x != nil {
		return x.VkRaw
	}
	return ""
}

func (x *SubmitVKRequest) GetChainId() uint64 {
	if x != nil {
		return x.ChainId
	}
	return 0
}

func (x *SubmitVKRequest) GetTargetChainId() uint64 {
	if x != nil {
		return x.TargetChainId
	}
	return 0
}

type SubmitVKResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Err           *ErrMsg                `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubmitVKResponse) Reset() {
	*x = SubmitVKResponse{}
	mi := &file_brevis_gateway_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmitVKResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitVKResponse) ProtoMessage() {}

func (x *SubmitVKResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brevis_gateway_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitVKResponse.ProtoReflect.Descriptor instead.
func (*SubmitVKResponse) Descriptor() ([]byte, []int) {
	return file_brevis_gateway_proto_rawDescGZIP(), []int{24}
}

func (x *SubmitVKResponse) GetErr() *ErrMsg {
	if x != nil {
		return x.Err
	}
	return nil
}

var File_brevis_gateway_proto protoreflect.FileDescriptor

var file_brevis_gateway_proto_rawDesc = []byte{
	0x0a, 0x14, 0x62, 0x72, 0x65, 0x76, 0x69, 0x73, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x62, 0x72, 0x65, 0x76, 0x69, 0x73, 0x1a, 0x12,
	0x62, 0x72, 0x65, 0x76, 0x69, 0x73, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x19, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x69, 0x72, 0x63, 0x75,
	0x69, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x3f, 0x0a, 0x06, 0x45,
	0x72, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x23, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x62, 0x72, 0x65, 0x76, 0x69, 0x73, 0x2e, 0x45, 0x72, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x96, 0x04, 0x0a,
	0x13, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12,
	0x38, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x72, 0x65, 0x76, 0x69, 0x73, 0x2e,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x70, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x48, 0x0a, 0x13, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x72, 0x65, 0x76, 0x69, 0x73, 0x2e,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x11, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x73, 0x12, 0x44, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x62, 0x72, 0x65, 0x76, 0x69, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x40, 0x0a, 0x10, 0x61, 0x70, 0x70,
	0x5f, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x70, 0x70,
	0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x61, 0x70, 0x70,
	0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x0a, 0x0f, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x62, 0x72, 0x65, 0x76, 0x69, 0x73, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x23, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x5f, 0x70, 0x6c, 0x6f, 0x6e, 0x6b, 0x79, 0x32, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x50, 0x6c,
	0x6f, 0x6e, 0x6b, 0x79, 0x32, 0x12, 0x15, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x5f, 0x76, 0x6d, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x75, 0x73, 0x65, 0x56, 0x6d, 0x12, 0x47, 0x0a, 0x13,
	0x76, 0x6d, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x56, 0x6d, 0x41, 0x70, 0x70, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x10, 0x76, 0x6d, 0x41, 0x70, 0x70, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x79, 0x0a, 0x14, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a,
	0x03, 0x65, 0x72, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x62, 0x72, 0x65,
	0x76, 0x69, 0x73, 0x2e, 0x45, 0x72, 0x72, 0x4d, 0x73, 0x67, 0x52, 0x03, 0x65, 0x72, 0x72, 0x12,
	0x2d, 0x0a, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62, 0x72, 0x65, 0x76, 0x69, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x4b, 0x65, 0x79, 0x52, 0x08, 0x71, 0x75, 0x65, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x66, 0x65, 0x65,
	0x22, 0x9f, 0x02, 0x0a, 0x1c, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x41, 0x70, 0x70, 0x43, 0x69,
	0x72, 0x63, 0x75, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2d, 0x0a, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62, 0x72, 0x65, 0x76, 0x69, 0x73, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x52, 0x08, 0x71, 0x75, 0x65, 0x72, 0x79, 0x4b, 0x65, 0x79,
	0x12, 0x26, 0x0a, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x6f,
	0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x49,
	0x0a, 0x10, 0x61, 0x70, 0x70, 0x5f, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x41, 0x70, 0x70, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x57, 0x69, 0x74, 0x68, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x0e, 0x61, 0x70, 0x70, 0x43, 0x69,
	0x72, 0x63, 0x75, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x47, 0x0a, 0x13, 0x76, 0x6d, 0x5f,
	0x61, 0x70, 0x70, 0x5f, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x56, 0x6d, 0x41, 0x70, 0x70, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x10, 0x76, 0x6d, 0x41, 0x70, 0x70, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x5b, 0x0a, 0x1d, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x41, 0x70, 0x70, 0x43,
	0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x62, 0x72, 0x65, 0x76, 0x69, 0x73, 0x2e, 0x45, 0x72, 0x72, 0x4d, 0x73, 0x67,
	0x52, 0x03, 0x65, 0x72, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22,
	0x6e, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x09, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62, 0x72,
	0x65, 0x76, 0x69, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x52, 0x08, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x22,
	0xa8, 0x02, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x03, 0x65, 0x72,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x62, 0x72, 0x65, 0x76, 0x69, 0x73,
	0x2e, 0x45, 0x72, 0x72, 0x4d, 0x73, 0x67, 0x52, 0x03, 0x65, 0x72, 0x72, 0x12, 0x2b, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x62,
	0x72, 0x65, 0x76, 0x69, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x78, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x78, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x30, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6f,
	0x66, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62,
	0x72, 0x65, 0x76, 0x69, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x44, 0x61, 0x74, 0x61, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x69,
	0x72, 0x63, 0x75, 0x69, 0x74, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x12, 0x37, 0x0a, 0x18, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x15, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x57, 0x69, 0x74, 0x68, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x22, 0x61, 0x0a, 0x18, 0x47, 0x65,
	0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x6f, 0x72, 0x4f, 0x50, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x48, 0x61, 0x73, 0x68, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x22, 0x5c, 0x0a,
	0x19, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x6f, 0x72,
	0x4f, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x03, 0x65, 0x72,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x62, 0x72, 0x65, 0x76, 0x69, 0x73,
	0x2e, 0x45, 0x72, 0x72, 0x4d, 0x73, 0x67, 0x52, 0x03, 0x65, 0x72, 0x72, 0x12, 0x1d, 0x0a, 0x0a,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x72, 0x0a, 0x19, 0x47,
	0x65, 0x74, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x75, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x09, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62, 0x72,
	0x65, 0x76, 0x69, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x52, 0x08, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x22,
	0xa3, 0x02, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x75, 0x6e,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20,
	0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x62, 0x72,
	0x65, 0x76, 0x69, 0x73, 0x2e, 0x45, 0x72, 0x72, 0x4d, 0x73, 0x67, 0x52, 0x03, 0x65, 0x72, 0x72,
	0x12, 0x20, 0x0a, 0x0c, 0x73, 0x72, 0x63, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x73, 0x72, 0x63, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x49, 0x64, 0x12, 0x30, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x72, 0x65, 0x76, 0x69, 0x73, 0x2e,
	0x50, 0x72, 0x6f, 0x6f, 0x66, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6f, 0x66,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x5f, 0x72,
	0x6f, 0x6f, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x6b, 0x6c,
	0x65, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x5f,
	0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x65, 0x72,
	0x6b, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6e, 0x6f,
	0x64, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x70, 0x70, 0x5f, 0x63,
	0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x70, 0x70, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0xe2, 0x01, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x1b, 0x0a, 0x07, 0x76, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x06, 0x76, 0x6b, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x70, 0x70, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1e, 0x0a, 0x0b, 0x61, 0x70, 0x70,
	0x5f, 0x76, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x70, 0x70, 0x56, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x6d, 0x74,
	0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x6d, 0x74,
	0x52, 0x6f, 0x6f, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x64, 0x75, 0x6d, 0x6d, 0x79, 0x5f, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x64, 0x75, 0x6d, 0x6d, 0x79, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xe2, 0x01, 0x0a, 0x17, 0x53,
	0x65, 0x6e, 0x64, 0x42, 0x61, 0x74, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49,
	0x64, 0x12, 0x27, 0x0a, 0x07, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x62, 0x72, 0x65, 0x76, 0x69, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x49, 0x64, 0x12, 0x2b, 0x0a, 0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x13, 0x2e, 0x62, 0x72, 0x65, 0x76, 0x69, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x17, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x12, 0x15, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x5f,
	0x76, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x75, 0x73, 0x65, 0x56, 0x6d, 0x22,
	0x8a, 0x03, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x38, 0x0a, 0x0d, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x70, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x62, 0x72, 0x65, 0x76, 0x69, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x73, 0x12, 0x48, 0x0a, 0x13, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x62, 0x72, 0x65, 0x76, 0x69, 0x73, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x11, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x44, 0x0a,
	0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x72, 0x65, 0x76, 0x69,
	0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x73, 0x12, 0x49, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x5f, 0x63, 0x69, 0x72, 0x63, 0x75,
	0x69, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x70, 0x70, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x57, 0x69, 0x74, 0x68, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x0e,
	0x61, 0x70, 0x70, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23,
	0x0a, 0x0b, 0x75, 0x73, 0x65, 0x5f, 0x70, 0x6c, 0x6f, 0x6e, 0x6b, 0x79, 0x32, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x50, 0x6c, 0x6f, 0x6e,
	0x6b, 0x79, 0x32, 0x12, 0x47, 0x0a, 0x13, 0x76, 0x6d, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x63, 0x69,
	0x72, 0x63, 0x75, 0x69, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x56, 0x6d, 0x41, 0x70, 0x70, 0x43,
	0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x76, 0x6d, 0x41, 0x70,
	0x70, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x7f, 0x0a, 0x18,
	0x53, 0x65, 0x6e, 0x64, 0x42, 0x61, 0x74, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x62, 0x72, 0x65, 0x76, 0x69, 0x73, 0x2e, 0x45,
	0x72, 0x72, 0x4d, 0x73, 0x67, 0x52, 0x03, 0x65, 0x72, 0x72, 0x12, 0x2f, 0x0a, 0x0a, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x62, 0x72, 0x65, 0x76, 0x69, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4b, 0x65, 0x79,
	0x52, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x66,
	0x65, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x66, 0x65, 0x65, 0x22, 0x3f, 0x0a,
	0x08, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x48, 0x61, 0x73, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x22, 0x93,
	0x01, 0x0a, 0x1d, 0x53, 0x65, 0x6e, 0x64, 0x42, 0x61, 0x74, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x20, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x62, 0x72, 0x65, 0x76, 0x69, 0x73, 0x2e, 0x45, 0x72, 0x72, 0x4d, 0x73, 0x67, 0x52, 0x03, 0x65,
	0x72, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6e,
	0x6f, 0x6e, 0x63, 0x65, 0x22, 0x39, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x4b, 0x65, 0x79, 0x73, 0x42, 0x79, 0x42, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x22,
	0x72, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x73, 0x42,
	0x79, 0x42, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x20, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x62, 0x72, 0x65, 0x76, 0x69, 0x73, 0x2e, 0x45, 0x72, 0x72, 0x4d, 0x73, 0x67, 0x52, 0x03, 0x65,
	0x72, 0x72, 0x12, 0x2f, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62, 0x72, 0x65, 0x76, 0x69, 0x73, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x52, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x4b,
	0x65, 0x79, 0x73, 0x22, 0x16, 0x0a, 0x14, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x44, 0x69,
	0x67, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x79, 0x0a, 0x15, 0x43,
	0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x62, 0x72, 0x65, 0x76, 0x69, 0x73, 0x2e, 0x45, 0x72, 0x72, 0x4d, 0x73,
	0x67, 0x52, 0x03, 0x65, 0x72, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x61, 0x73, 0x68, 0x65, 0x73,
	0x5f, 0x6c, 0x69, 0x6d, 0x62, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0b, 0x68, 0x61,
	0x73, 0x68, 0x65, 0x73, 0x4c, 0x69, 0x6d, 0x62, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x6e, 0x61,
	0x72, 0x6b, 0x5f, 0x76, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x67, 0x6e,
	0x61, 0x72, 0x6b, 0x56, 0x6b, 0x73, 0x22, 0x35, 0x0a, 0x18, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69,
	0x74, 0x44, 0x75, 0x6d, 0x6d, 0x79, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x22, 0x81, 0x01,
	0x0a, 0x19, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x44, 0x75, 0x6d, 0x6d, 0x79, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x03, 0x65,
	0x72, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x62, 0x72, 0x65, 0x76, 0x69,
	0x73, 0x2e, 0x45, 0x72, 0x72, 0x4d, 0x73, 0x67, 0x52, 0x03, 0x65, 0x72, 0x72, 0x12, 0x18, 0x0a,
	0x07, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74,
	0x78, 0x22, 0x84, 0x01, 0x0a, 0x0f, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x56, 0x4b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x76, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x15,
	0x0a, 0x06, 0x76, 0x6b, 0x5f, 0x72, 0x61, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x6b, 0x52, 0x61, 0x77, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64,
	0x12, 0x26, 0x0a, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x22, 0x34, 0x0a, 0x10, 0x53, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x56, 0x4b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x03,
	0x65, 0x72, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x62, 0x72, 0x65, 0x76,
	0x69, 0x73, 0x2e, 0x45, 0x72, 0x72, 0x4d, 0x73, 0x67, 0x52, 0x03, 0x65, 0x72, 0x72, 0x2a, 0x8a,
	0x01, 0x0a, 0x07, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x31, 0x0a, 0x2d, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f,
	0x44, 0x45, 0x5f, 0x53, 0x4c, 0x4f, 0x54, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x50, 0x52,
	0x4f, 0x4f, 0x46, 0x5f, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46,
	0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x12, 0x32, 0x0a, 0x2e, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x4f, 0x46, 0x5f, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x2a, 0x2c, 0x0a, 0x0b, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e,
	0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x43,
	0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x01, 0x2a, 0x27, 0x0a, 0x0b, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0b, 0x0a, 0x07, 0x5a, 0x4b, 0x5f, 0x4d,
	0x4f, 0x44, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x50, 0x5f, 0x4d, 0x4f, 0x44, 0x45,
	0x10, 0x01, 0x2a, 0xac, 0x03, 0x0a, 0x0b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x0e, 0x0a, 0x0a, 0x51, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x51, 0x53, 0x5f, 0x54, 0x4f, 0x5f, 0x42, 0x45, 0x5f, 0x50,
	0x41, 0x49, 0x44, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x51, 0x53, 0x5f, 0x50, 0x41, 0x49, 0x44,
	0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x51, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x4f, 0x46, 0x5f, 0x52,
	0x45, 0x41, 0x44, 0x59, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x51, 0x53, 0x5f, 0x43, 0x4f, 0x4d,
	0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x51, 0x53, 0x5f, 0x46, 0x41,
	0x49, 0x4c, 0x45, 0x44, 0x10, 0x05, 0x12, 0x19, 0x0a, 0x15, 0x51, 0x53, 0x5f, 0x4f, 0x50, 0x5f,
	0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10,
	0x06, 0x12, 0x17, 0x0a, 0x13, 0x51, 0x53, 0x5f, 0x4f, 0x50, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41,
	0x47, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x51, 0x53,
	0x5f, 0x4f, 0x50, 0x5f, 0x53, 0x55, 0x42, 0x4d, 0x49, 0x54, 0x54, 0x45, 0x44, 0x10, 0x08, 0x12,
	0x23, 0x0a, 0x1f, 0x51, 0x53, 0x5f, 0x4f, 0x50, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45,
	0x5f, 0x53, 0x55, 0x42, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c,
	0x45, 0x44, 0x10, 0x09, 0x12, 0x13, 0x0a, 0x0f, 0x51, 0x53, 0x5f, 0x4f, 0x50, 0x5f, 0x44, 0x49,
	0x53, 0x50, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x0a, 0x12, 0x1c, 0x0a, 0x18, 0x51, 0x53, 0x5f,
	0x4f, 0x50, 0x5f, 0x41, 0x53, 0x4b, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59,
	0x5f, 0x44, 0x41, 0x54, 0x41, 0x10, 0x0b, 0x12, 0x1e, 0x0a, 0x1a, 0x51, 0x53, 0x5f, 0x4f, 0x50,
	0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x55, 0x42, 0x4d,
	0x49, 0x54, 0x54, 0x45, 0x44, 0x10, 0x0c, 0x12, 0x20, 0x0a, 0x1c, 0x51, 0x53, 0x5f, 0x4f, 0x50,
	0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x50, 0x4f, 0x53, 0x54,
	0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x0d, 0x12, 0x1d, 0x0a, 0x19, 0x51, 0x53, 0x5f,
	0x4f, 0x50, 0x5f, 0x41, 0x53, 0x4b, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59,
	0x5f, 0x50, 0x52, 0x4f, 0x4f, 0x46, 0x10, 0x0e, 0x12, 0x12, 0x0a, 0x0e, 0x51, 0x53, 0x5f, 0x4f,
	0x50, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x55, 0x54, 0x45, 0x44, 0x10, 0x0f, 0x12, 0x12, 0x0a, 0x0e,
	0x51, 0x53, 0x5f, 0x4f, 0x50, 0x5f, 0x41, 0x54, 0x54, 0x45, 0x53, 0x54, 0x45, 0x44, 0x10, 0x10,
	0x12, 0x0f, 0x0a, 0x0b, 0x51, 0x53, 0x5f, 0x52, 0x45, 0x46, 0x55, 0x4e, 0x44, 0x45, 0x44, 0x10,
	0x11, 0x32, 0xb9, 0x0a, 0x0a, 0x07, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x66, 0x0a,
	0x0c, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1b, 0x2e,
	0x62, 0x72, 0x65, 0x76, 0x69, 0x73, 0x2e, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x62, 0x72, 0x65,
	0x76, 0x69, 0x73, 0x2e, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15,
	0x3a, 0x01, 0x2a, 0x22, 0x10, 0x2f, 0x7a, 0x6b, 0x2f, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x8a, 0x01, 0x0a, 0x15, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x41, 0x70, 0x70, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12,
	0x24, 0x2e, 0x62, 0x72, 0x65, 0x76, 0x69, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x41,
	0x70, 0x70, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x62, 0x72, 0x65, 0x76, 0x69, 0x73, 0x2e, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x74, 0x41, 0x70, 0x70, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x50,
	0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1e, 0x3a, 0x01, 0x2a, 0x22, 0x19, 0x2f, 0x7a, 0x6b, 0x2f, 0x73, 0x75, 0x62,
	0x6d, 0x69, 0x74, 0x41, 0x70, 0x70, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x50, 0x72, 0x6f,
	0x6f, 0x66, 0x12, 0x6b, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x2e, 0x62, 0x72, 0x65, 0x76, 0x69, 0x73, 0x2e, 0x47, 0x65,
	0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x62, 0x72, 0x65, 0x76, 0x69, 0x73, 0x2e, 0x47, 0x65, 0x74,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x12, 0x12, 0x2f, 0x7a, 0x6b,
	0x2f, 0x67, 0x65, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x77, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x46,
	0x6f, 0x72, 0x4f, 0x50, 0x12, 0x20, 0x2e, 0x62, 0x72, 0x65, 0x76, 0x69, 0x73, 0x2e, 0x47, 0x65,
	0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x6f, 0x72, 0x4f, 0x50, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x62, 0x72, 0x65, 0x76, 0x69, 0x73, 0x2e,
	0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x6f, 0x72, 0x4f,
	0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x17, 0x12, 0x15, 0x2f, 0x7a, 0x6b, 0x2f, 0x67, 0x65, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49,
	0x6e, 0x66, 0x6f, 0x46, 0x6f, 0x72, 0x4f, 0x50, 0x12, 0x7b, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x53,
	0x69, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x75, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x21,
	0x2e, 0x62, 0x72, 0x65, 0x76, 0x69, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x69, 0x6e, 0x67, 0x6c,
	0x65, 0x52, 0x75, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x22, 0x2e, 0x62, 0x72, 0x65, 0x76, 0x69, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x69,
	0x6e, 0x67, 0x6c, 0x65, 0x52, 0x75, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x12, 0x16, 0x2f,
	0x7a, 0x6b, 0x2f, 0x67, 0x65, 0x74, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x75, 0x6e, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x76, 0x0a, 0x10, 0x53, 0x65, 0x6e, 0x64, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x1f, 0x2e, 0x62, 0x72, 0x65, 0x76,
	0x69, 0x73, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x42, 0x61, 0x74, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x62, 0x72, 0x65,
	0x76, 0x69, 0x73, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x42, 0x61, 0x74, 0x63, 0x68, 0x51, 0x75, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x19, 0x3a, 0x01, 0x2a, 0x22, 0x14, 0x2f, 0x7a, 0x6b, 0x2f, 0x73, 0x65, 0x6e,
	0x64, 0x42, 0x61, 0x74, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x85, 0x01,
	0x0a, 0x15, 0x53, 0x65, 0x6e, 0x64, 0x42, 0x61, 0x74, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x12, 0x1f, 0x2e, 0x62, 0x72, 0x65, 0x76, 0x69, 0x73,
	0x2e, 0x53, 0x65, 0x6e, 0x64, 0x42, 0x61, 0x74, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x62, 0x72, 0x65, 0x76, 0x69,
	0x73, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x42, 0x61, 0x74, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x3a, 0x01, 0x2a, 0x22, 0x19, 0x2f, 0x7a, 0x6b, 0x2f,
	0x73, 0x65, 0x6e, 0x64, 0x42, 0x61, 0x74, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x41, 0x73, 0x79, 0x6e, 0x63, 0x12, 0x87, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x4b, 0x65, 0x79, 0x73, 0x42, 0x79, 0x42, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12,
	0x24, 0x2e, 0x62, 0x72, 0x65, 0x76, 0x69, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x4b, 0x65, 0x79, 0x73, 0x42, 0x79, 0x42, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x62, 0x72, 0x65, 0x76, 0x69, 0x73, 0x2e, 0x47,
	0x65, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x73, 0x42, 0x79, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1b, 0x12, 0x19, 0x2f, 0x7a, 0x6b, 0x2f, 0x67, 0x65, 0x74, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x4b, 0x65, 0x79, 0x73, 0x42, 0x79, 0x42, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12,
	0x6d, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x44, 0x69, 0x67,
	0x65, 0x73, 0x74, 0x12, 0x1c, 0x2e, 0x62, 0x72, 0x65, 0x76, 0x69, 0x73, 0x2e, 0x43, 0x69, 0x72,
	0x63, 0x75, 0x69, 0x74, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1d, 0x2e, 0x62, 0x72, 0x65, 0x76, 0x69, 0x73, 0x2e, 0x43, 0x69, 0x72, 0x63, 0x75,
	0x69, 0x74, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x12, 0x14, 0x2f, 0x7a, 0x6b, 0x2f, 0x67, 0x65,
	0x74, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x12, 0x84,
	0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x44, 0x75, 0x6d,
	0x6d, 0x79, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20,
	0x2e, 0x62, 0x72, 0x65, 0x76, 0x69, 0x73, 0x2e, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x44,
	0x75, 0x6d, 0x6d, 0x79, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x21, 0x2e, 0x62, 0x72, 0x65, 0x76, 0x69, 0x73, 0x2e, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69,
	0x74, 0x44, 0x75, 0x6d, 0x6d, 0x79, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x12, 0x18, 0x2f, 0x7a, 0x6b,
	0x2f, 0x67, 0x65, 0x74, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x44, 0x75, 0x6d, 0x6d, 0x79,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x56, 0x0a, 0x08, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x56,
	0x4b, 0x12, 0x17, 0x2e, 0x62, 0x72, 0x65, 0x76, 0x69, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69,
	0x74, 0x56, 0x4b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x62, 0x72, 0x65,
	0x76, 0x69, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x56, 0x4b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x3a, 0x01, 0x2a, 0x22,
	0x0c, 0x2f, 0x7a, 0x6b, 0x2f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x56, 0x4b, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_brevis_gateway_proto_rawDescOnce sync.Once
	file_brevis_gateway_proto_rawDescData = file_brevis_gateway_proto_rawDesc
)

func file_brevis_gateway_proto_rawDescGZIP() []byte {
	file_brevis_gateway_proto_rawDescOnce.Do(func() {
		file_brevis_gateway_proto_rawDescData = protoimpl.X.CompressGZIP(file_brevis_gateway_proto_rawDescData)
	})
	return file_brevis_gateway_proto_rawDescData
}

var file_brevis_gateway_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_brevis_gateway_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_brevis_gateway_proto_goTypes = []any{
	(ErrCode)(0),                                // 0: brevis.ErrCode
	(CheckStatus)(0),                            // 1: brevis.CheckStatus
	(QueryOption)(0),                            // 2: brevis.QueryOption
	(QueryStatus)(0),                            // 3: brevis.QueryStatus
	(*ErrMsg)(nil),                              // 4: brevis.ErrMsg
	(*PrepareQueryRequest)(nil),                 // 5: brevis.PrepareQueryRequest
	(*PrepareQueryResponse)(nil),                // 6: brevis.PrepareQueryResponse
	(*SubmitAppCircuitProofRequest)(nil),        // 7: brevis.SubmitAppCircuitProofRequest
	(*SubmitAppCircuitProofResponse)(nil),       // 8: brevis.SubmitAppCircuitProofResponse
	(*GetQueryStatusRequest)(nil),               // 9: brevis.GetQueryStatusRequest
	(*GetQueryStatusResponse)(nil),              // 10: brevis.GetQueryStatusResponse
	(*GetQueryInfoForOPRequest)(nil),            // 11: brevis.GetQueryInfoForOPRequest
	(*GetQueryInfoForOPResponse)(nil),           // 12: brevis.GetQueryInfoForOPResponse
	(*GetSingleRunParamsRequest)(nil),           // 13: brevis.GetSingleRunParamsRequest
	(*GetSingleRunParamsResponse)(nil),          // 14: brevis.GetSingleRunParamsResponse
	(*ProofData)(nil),                           // 15: brevis.ProofData
	(*SendBatchQueriesRequest)(nil),             // 16: brevis.SendBatchQueriesRequest
	(*Query)(nil),                               // 17: brevis.Query
	(*SendBatchQueriesResponse)(nil),            // 18: brevis.SendBatchQueriesResponse
	(*QueryKey)(nil),                            // 19: brevis.QueryKey
	(*SendBatchQueriesAsyncResponse)(nil),       // 20: brevis.SendBatchQueriesAsyncResponse
	(*GetQueryKeysByBatchIdRequest)(nil),        // 21: brevis.GetQueryKeysByBatchIdRequest
	(*GetQueryKeysByBatchIdResponse)(nil),       // 22: brevis.GetQueryKeysByBatchIdResponse
	(*CircuitDigestRequest)(nil),                // 23: brevis.CircuitDigestRequest
	(*CircuitDigestResponse)(nil),               // 24: brevis.CircuitDigestResponse
	(*CircuitDummyInputRequest)(nil),            // 25: brevis.CircuitDummyInputRequest
	(*CircuitDummyInputResponse)(nil),           // 26: brevis.CircuitDummyInputResponse
	(*SubmitVKRequest)(nil),                     // 27: brevis.SubmitVKRequest
	(*SubmitVKResponse)(nil),                    // 28: brevis.SubmitVKResponse
	(*ReceiptInfo)(nil),                         // 29: brevis.ReceiptInfo
	(*StorageQueryInfo)(nil),                    // 30: brevis.StorageQueryInfo
	(*TransactionInfo)(nil),                     // 31: brevis.TransactionInfo
	(*commonproto.AppCircuitInfo)(nil),          // 32: common.AppCircuitInfo
	(*commonproto.VmAppCircuitInfo)(nil),        // 33: common.VmAppCircuitInfo
	(*commonproto.AppCircuitInfoWithProof)(nil), // 34: common.AppCircuitInfoWithProof
}
var file_brevis_gateway_proto_depIdxs = []int32{
	0,  // 0: brevis.ErrMsg.code:type_name -> brevis.ErrCode
	29, // 1: brevis.PrepareQueryRequest.receipt_infos:type_name -> brevis.ReceiptInfo
	30, // 2: brevis.PrepareQueryRequest.storage_query_infos:type_name -> brevis.StorageQueryInfo
	31, // 3: brevis.PrepareQueryRequest.transaction_infos:type_name -> brevis.TransactionInfo
	32, // 4: brevis.PrepareQueryRequest.app_circuit_info:type_name -> common.AppCircuitInfo
	2,  // 5: brevis.PrepareQueryRequest.option:type_name -> brevis.QueryOption
	33, // 6: brevis.PrepareQueryRequest.vm_app_circuit_info:type_name -> common.VmAppCircuitInfo
	4,  // 7: brevis.PrepareQueryResponse.err:type_name -> brevis.ErrMsg
	19, // 8: brevis.PrepareQueryResponse.query_key:type_name -> brevis.QueryKey
	19, // 9: brevis.SubmitAppCircuitProofRequest.query_key:type_name -> brevis.QueryKey
	34, // 10: brevis.SubmitAppCircuitProofRequest.app_circuit_info:type_name -> common.AppCircuitInfoWithProof
	33, // 11: brevis.SubmitAppCircuitProofRequest.vm_app_circuit_info:type_name -> common.VmAppCircuitInfo
	4,  // 12: brevis.SubmitAppCircuitProofResponse.err:type_name -> brevis.ErrMsg
	19, // 13: brevis.GetQueryStatusRequest.query_key:type_name -> brevis.QueryKey
	4,  // 14: brevis.GetQueryStatusResponse.err:type_name -> brevis.ErrMsg
	3,  // 15: brevis.GetQueryStatusResponse.status:type_name -> brevis.QueryStatus
	15, // 16: brevis.GetQueryStatusResponse.proof_data:type_name -> brevis.ProofData
	4,  // 17: brevis.GetQueryInfoForOPResponse.err:type_name -> brevis.ErrMsg
	19, // 18: brevis.GetSingleRunParamsRequest.query_key:type_name -> brevis.QueryKey
	4,  // 19: brevis.GetSingleRunParamsResponse.err:type_name -> brevis.ErrMsg
	15, // 20: brevis.GetSingleRunParamsResponse.proof_data:type_name -> brevis.ProofData
	17, // 21: brevis.SendBatchQueriesRequest.queries:type_name -> brevis.Query
	2,  // 22: brevis.SendBatchQueriesRequest.option:type_name -> brevis.QueryOption
	29, // 23: brevis.Query.receipt_infos:type_name -> brevis.ReceiptInfo
	30, // 24: brevis.Query.storage_query_infos:type_name -> brevis.StorageQueryInfo
	31, // 25: brevis.Query.transaction_infos:type_name -> brevis.TransactionInfo
	34, // 26: brevis.Query.app_circuit_info:type_name -> common.AppCircuitInfoWithProof
	33, // 27: brevis.Query.vm_app_circuit_info:type_name -> common.VmAppCircuitInfo
	4,  // 28: brevis.SendBatchQueriesResponse.err:type_name -> brevis.ErrMsg
	19, // 29: brevis.SendBatchQueriesResponse.query_keys:type_name -> brevis.QueryKey
	4,  // 30: brevis.SendBatchQueriesAsyncResponse.err:type_name -> brevis.ErrMsg
	4,  // 31: brevis.GetQueryKeysByBatchIdResponse.err:type_name -> brevis.ErrMsg
	19, // 32: brevis.GetQueryKeysByBatchIdResponse.query_keys:type_name -> brevis.QueryKey
	4,  // 33: brevis.CircuitDigestResponse.err:type_name -> brevis.ErrMsg
	4,  // 34: brevis.CircuitDummyInputResponse.err:type_name -> brevis.ErrMsg
	4,  // 35: brevis.SubmitVKResponse.err:type_name -> brevis.ErrMsg
	5,  // 36: brevis.Gateway.PrepareQuery:input_type -> brevis.PrepareQueryRequest
	7,  // 37: brevis.Gateway.SubmitAppCircuitProof:input_type -> brevis.SubmitAppCircuitProofRequest
	9,  // 38: brevis.Gateway.GetQueryStatus:input_type -> brevis.GetQueryStatusRequest
	11, // 39: brevis.Gateway.GetQueryInfoForOP:input_type -> brevis.GetQueryInfoForOPRequest
	13, // 40: brevis.Gateway.GetSingleRunParams:input_type -> brevis.GetSingleRunParamsRequest
	16, // 41: brevis.Gateway.SendBatchQueries:input_type -> brevis.SendBatchQueriesRequest
	16, // 42: brevis.Gateway.SendBatchQueriesAsync:input_type -> brevis.SendBatchQueriesRequest
	21, // 43: brevis.Gateway.GetQueryKeysByBatchId:input_type -> brevis.GetQueryKeysByBatchIdRequest
	23, // 44: brevis.Gateway.GetCircuitDigest:input_type -> brevis.CircuitDigestRequest
	25, // 45: brevis.Gateway.GetCircuitDummyInputRequest:input_type -> brevis.CircuitDummyInputRequest
	27, // 46: brevis.Gateway.SubmitVK:input_type -> brevis.SubmitVKRequest
	6,  // 47: brevis.Gateway.PrepareQuery:output_type -> brevis.PrepareQueryResponse
	8,  // 48: brevis.Gateway.SubmitAppCircuitProof:output_type -> brevis.SubmitAppCircuitProofResponse
	10, // 49: brevis.Gateway.GetQueryStatus:output_type -> brevis.GetQueryStatusResponse
	12, // 50: brevis.Gateway.GetQueryInfoForOP:output_type -> brevis.GetQueryInfoForOPResponse
	14, // 51: brevis.Gateway.GetSingleRunParams:output_type -> brevis.GetSingleRunParamsResponse
	18, // 52: brevis.Gateway.SendBatchQueries:output_type -> brevis.SendBatchQueriesResponse
	20, // 53: brevis.Gateway.SendBatchQueriesAsync:output_type -> brevis.SendBatchQueriesAsyncResponse
	22, // 54: brevis.Gateway.GetQueryKeysByBatchId:output_type -> brevis.GetQueryKeysByBatchIdResponse
	24, // 55: brevis.Gateway.GetCircuitDigest:output_type -> brevis.CircuitDigestResponse
	26, // 56: brevis.Gateway.GetCircuitDummyInputRequest:output_type -> brevis.CircuitDummyInputResponse
	28, // 57: brevis.Gateway.SubmitVK:output_type -> brevis.SubmitVKResponse
	47, // [47:58] is the sub-list for method output_type
	36, // [36:47] is the sub-list for method input_type
	36, // [36:36] is the sub-list for extension type_name
	36, // [36:36] is the sub-list for extension extendee
	0,  // [0:36] is the sub-list for field type_name
}

func init() { file_brevis_gateway_proto_init() }
func file_brevis_gateway_proto_init() {
	if File_brevis_gateway_proto != nil {
		return
	}
	file_brevis_types_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_brevis_gateway_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_brevis_gateway_proto_goTypes,
		DependencyIndexes: file_brevis_gateway_proto_depIdxs,
		EnumInfos:         file_brevis_gateway_proto_enumTypes,
		MessageInfos:      file_brevis_gateway_proto_msgTypes,
	}.Build()
	File_brevis_gateway_proto = out.File
	file_brevis_gateway_proto_rawDesc = nil
	file_brevis_gateway_proto_goTypes = nil
	file_brevis_gateway_proto_depIdxs = nil
}
