// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: sdk/prover.proto

package sdkproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Prover_Prove_FullMethodName      = "/sdk.Prover/Prove"
	Prover_ProveAsync_FullMethodName = "/sdk.Prover/ProveAsync"
	Prover_GetProof_FullMethodName   = "/sdk.Prover/GetProof"
)

// ProverClient is the client API for Prover service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProverClient interface {
	// Generates a proof with the given data and custom input assignments
	Prove(ctx context.Context, in *ProveRequest, opts ...grpc.CallOption) (*ProveResponse, error)
	ProveAsync(ctx context.Context, in *ProveRequest, opts ...grpc.CallOption) (*ProveAsyncResponse, error)
	GetProof(ctx context.Context, in *GetProofRequest, opts ...grpc.CallOption) (*GetProofResponse, error)
}

type proverClient struct {
	cc grpc.ClientConnInterface
}

func NewProverClient(cc grpc.ClientConnInterface) ProverClient {
	return &proverClient{cc}
}

func (c *proverClient) Prove(ctx context.Context, in *ProveRequest, opts ...grpc.CallOption) (*ProveResponse, error) {
	out := new(ProveResponse)
	err := c.cc.Invoke(ctx, Prover_Prove_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proverClient) ProveAsync(ctx context.Context, in *ProveRequest, opts ...grpc.CallOption) (*ProveAsyncResponse, error) {
	out := new(ProveAsyncResponse)
	err := c.cc.Invoke(ctx, Prover_ProveAsync_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proverClient) GetProof(ctx context.Context, in *GetProofRequest, opts ...grpc.CallOption) (*GetProofResponse, error) {
	out := new(GetProofResponse)
	err := c.cc.Invoke(ctx, Prover_GetProof_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProverServer is the server API for Prover service.
// All implementations should embed UnimplementedProverServer
// for forward compatibility
type ProverServer interface {
	// Generates a proof with the given data and custom input assignments
	Prove(context.Context, *ProveRequest) (*ProveResponse, error)
	ProveAsync(context.Context, *ProveRequest) (*ProveAsyncResponse, error)
	GetProof(context.Context, *GetProofRequest) (*GetProofResponse, error)
}

// UnimplementedProverServer should be embedded to have forward compatible implementations.
type UnimplementedProverServer struct {
}

func (UnimplementedProverServer) Prove(context.Context, *ProveRequest) (*ProveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Prove not implemented")
}
func (UnimplementedProverServer) ProveAsync(context.Context, *ProveRequest) (*ProveAsyncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProveAsync not implemented")
}
func (UnimplementedProverServer) GetProof(context.Context, *GetProofRequest) (*GetProofResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProof not implemented")
}

// UnsafeProverServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProverServer will
// result in compilation errors.
type UnsafeProverServer interface {
	mustEmbedUnimplementedProverServer()
}

func RegisterProverServer(s grpc.ServiceRegistrar, srv ProverServer) {
	s.RegisterService(&Prover_ServiceDesc, srv)
}

func _Prover_Prove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverServer).Prove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Prover_Prove_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverServer).Prove(ctx, req.(*ProveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Prover_ProveAsync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverServer).ProveAsync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Prover_ProveAsync_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverServer).ProveAsync(ctx, req.(*ProveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Prover_GetProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProofRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverServer).GetProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Prover_GetProof_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverServer).GetProof(ctx, req.(*GetProofRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Prover_ServiceDesc is the grpc.ServiceDesc for Prover service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Prover_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sdk.Prover",
	HandlerType: (*ProverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Prove",
			Handler:    _Prover_Prove_Handler,
		},
		{
			MethodName: "ProveAsync",
			Handler:    _Prover_ProveAsync_Handler,
		},
		{
			MethodName: "GetProof",
			Handler:    _Prover_GetProof_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sdk/prover.proto",
}
